import re

from typing import List

from uc_flow_nodes.schemas import NodeRunContext
from uc_flow_nodes.service import NodeService
from uc_flow_nodes.views import info, execute
from uc_flow_schemas import flow
from uc_flow_schemas.flow import Property, OptionValue, RunState
from uc_http_requester.requester import Request


class NodeType(flow.NodeType):
    id: str = '5c39bc6c-7921-4296-a6b6-5445436b2c6c'
    type: flow.NodeType.Type = flow.NodeType.Type.action
    name: str = 'summing_node'
    displayName: str = 'Summing node'
    icon: str = '<svg><text x="8" y="50" font-size="50">ü§ñ</text></svg>'
    description: str = '–°—É–º–º–∏—Ä—É–µ—Ç 2 —á–∏—Å–ª–∞, –æ–¥–Ω–æ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏'
    properties: List[Property] = [
        Property(
            displayName='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ',
            name='number_in_line',
            type=Property.Type.STRING,
            description='–î–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—É–¥–µ—Ç —Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –ï—Å–ª–∏ ' \
                        '–≤ —Å—Ç—Ä–æ–∫–µ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã, —Ç–æ —á–∏—Å–ª–æ –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–æ ' \
                        '–ü—Ä–∏–º–µ—Ä: 123d2 -> 123 –∏ 2',
            required=True,
            default='0',
        ),
        Property(
            displayName='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ',
            name='number',
            type=Property.Type.NUMBER,
            required=True,
            default=0,
        ),
        Property(
            displayName='–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å',
            name='switch',
            type=Property.Type.OPTIONS,
            description='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
            required=True,
            options=[
                OptionValue(name='–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏',value='string'), 
                OptionValue(name='–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞', value='number')
                ],
        )
    ]


class InfoView(info.Info):
    class Response(info.Info.Response):
        node_type: NodeType


class ExecuteView(execute.Execute):
    async def post(self, json: NodeRunContext) -> NodeRunContext:
        try:
            _find_numbers = re.findall(r"-\d+|\d+", json.node.data.properties['number_in_line'])    
            _sum_numbers = sum([int(number) for number in _find_numbers])\
                           + json.node.data.properties['number']
            _dictionary_of_conclusions = {
                'string': str(_sum_numbers),
                'number': _sum_numbers
                }
            _json_response = {"result": _dictionary_of_conclusions[json.node.data.properties['switch']]}
            
            if len(_find_numbers) != 1:
                _warning_text = "–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É —á–∏—Å–ª–æ "  \
                f"{0 if len(_find_numbers) == 0 else ''.join(_find_numbers)} " \
                "–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
                _json_response['warning_message'] = _warning_text

            await json.save_result(_json_response)
            json.state = RunState.complete
        except Exception as e:
            self.log.warning(f'Error {e}')
            await json.save_error(str(e))
            json.state = RunState.error
        return json


class Service(NodeService):
    class Routes(NodeService.Routes):
        Info = InfoView
        Execute = ExecuteView
